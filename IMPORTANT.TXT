const express = require('express');
const http = require('http');
const app = express();
const cors = require('cors');

app.use(cors());
// middleware

const fetchStockData = (symbol, startDate, interval = '1day') => {
    return new Promise((resolve, reject) => {
        const options = {
            "method": "GET",
            "hostname": "api.twelvedata.com",
            "path": `time_series?apikey=07b67fd520c444b1923d535211aa4bed&interval=1day&symbol=AAPL&start_date=2023-06-04 00:00:00&format=JSON`,
            "port": null,
        };

        const req = http.request(options, function (res) {
            const chunks = [];

            res.on("data", function (chunk) {
                chunks.push(chunk);
            });

            res.on("end", function () {
                const body = Buffer.concat(chunks);
                resolve(JSON.parse(body.toString()));
            });
        });

        req.on("error", function (error) {
            reject(error);
        });

        req.end();
    });
};

app.get('/stock/:symbol/:startDate', async (req, res) => {
    
    const { symbol, startDate } = req.params;
    
    if (!symbol) {
        return res.status(400).json({ error: 'Stock symbol is required' });
    }

    try {
        const data = await fetchStockData(symbol, startDate);
        res.json(data);
    } catch (error) {
        console.error('Error fetching stock data:', error); // Log the error for debugging
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
